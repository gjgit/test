[{"E:\\node\\my-app\\src\\index.js":"1","E:\\node\\my-app\\src\\App.js":"2","E:\\node\\my-app\\src\\reportWebVitals.js":"3","E:\\node\\my-app\\src\\app\\store.js":"4","E:\\node\\my-app\\src\\features\\spam\\Spam.js":"5","E:\\node\\my-app\\src\\features\\spam\\SpamData.js":"6","E:\\node\\my-app\\src\\features\\spam\\spamSlice.js":"7","E:\\node\\my-app\\src\\features\\delete\\deleteSlice.js":"8","E:\\node\\my-app\\src\\features\\delete\\Delete.js":"9","E:\\node\\my-app\\src\\features\\delete\\DeleteData.js":"10","E:\\node\\my-app\\src\\features\\inbox\\Inbox.js":"11","E:\\node\\my-app\\src\\features\\inbox\\InboxData.js":"12","E:\\node\\my-app\\src\\features\\inbox\\inboxSlice.js":"13"},{"size":719,"mtime":1609338667336,"results":"14","hashOfConfig":"15"},{"size":3239,"mtime":1609415133775,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"15"},{"size":379,"mtime":1609407978172,"results":"18","hashOfConfig":"15"},{"size":5722,"mtime":1609415581466,"results":"19","hashOfConfig":"15"},{"size":581,"mtime":1609413083562,"results":"20","hashOfConfig":"15"},{"size":1618,"mtime":1609415617938,"results":"21","hashOfConfig":"15"},{"size":618,"mtime":1609415674922,"results":"22","hashOfConfig":"15"},{"size":1529,"mtime":1609415652609,"results":"23","hashOfConfig":"15"},{"size":639,"mtime":1609403023157,"results":"24","hashOfConfig":"15"},{"size":5672,"mtime":1610030667897,"results":"25","hashOfConfig":"15"},{"size":587,"mtime":1609413101122,"results":"26","hashOfConfig":"15"},{"size":2127,"mtime":1610030572816,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"xcv4se",{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},"E:\\node\\my-app\\src\\index.js",[],["59","60"],"E:\\node\\my-app\\src\\App.js",["61"],"import React from \"react\";\nimport \"./App.css\";\nimport { useSelector } from \"react-redux\";\nimport { Link, Route, Switch, Redirect } from \"react-router-dom\";\nimport Inbox from \"./features/inbox/Inbox\";\nimport Spam from \"./features/spam/Spam\";\nimport Delete from \"./features/delete/Delete\";\n\nimport { GetInbox } from \"./features/inbox/inboxSlice\";\nimport { GetSpamData } from \"./features/spam/spamSlice\";\nimport { getDeleteData } from \"./features/delete/deleteSlice\";\n\nfunction App() {\n  // calculate unread counts ( get values from reducer and then count it.)\n  const InboxDatas = useSelector(GetInbox);\n  const SpamDatas = useSelector(GetSpamData);\n  const DeleteDatas = useSelector(getDeleteData);\n  const Inboxcount = InboxDatas.filter(({ unread }) => unread === true).length;\n  const Spamcount = SpamDatas.filter(({ unread }) => unread === true).length;\n  const DeleteCount = DeleteDatas.filter(({ id }) => id).length;\n\n  return (\n    <div className=\"App\">\n      <header className=\"navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0\">\n        <a className=\"navbar-brand col-md-3 col-lg-2 me-0 px-3\">Company name</a>\n      </header>\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <nav className=\"col-md-3 col-lg-2 d-md-block bg-light sidebar \">\n            <div className=\"position-sticky pt-3\">\n              <ul className=\"nav flex-column\">\n                <li className=\"nav-item\">\n                  <span className=\"nav-link\">\n                    <Link to=\"/inbox\">Inbox </Link>{\" \"}\n                    <span className=\"badge  bg-secondary rounded-pill mt-auto text-white\">\n                      {Inboxcount}\n                    </span>\n                  </span>\n                </li>\n                <li className=\"nav-item\">\n                  <span className=\"nav-link\">\n                    <Link to=\"/spam\">Spam </Link>\n                    <span className=\"badge  bg-secondary rounded-pill mt-auto text-white\">\n                      {Spamcount}\n                    </span>\n                  </span>\n                </li>\n                <li className=\"nav-item\">\n                  <span className=\"nav-link\">\n                    <Link to=\"/delete\">Deleted Items </Link>\n                    <span className=\"badge  bg-secondary rounded-pill mt-auto text-white\">\n                      {DeleteCount}\n                    </span>\n                  </span>\n                </li>\n                <li className=\"nav-item\">\n                  <span className=\"nav-link\">\n                    <Link to=\"/admin\">Custom Folder</Link>\n                  </span>\n                </li>\n              </ul>\n            </div>\n          </nav>\n          <main className=\"col-md-9 ms-sm-auto col-lg-10 px-md-0\">\n            {/* start router */}\n            <Switch>\n              <Redirect exact from=\"/\" to=\"inbox\" />\n              <Route path=\"/inbox\">\n                <Inbox />\n              </Route>\n              <Route path=\"/spam\">\n                <Spam />\n              </Route>\n              <Route path=\"/delete\">\n                <Delete />\n              </Route>\n            </Switch>\n            {/* end router */}\n          </main>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","E:\\node\\my-app\\src\\reportWebVitals.js",[],"E:\\node\\my-app\\src\\app\\store.js",[],"E:\\node\\my-app\\src\\features\\spam\\Spam.js",["62","63"],"import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Link, Route, useRouteMatch } from \"react-router-dom\";\r\nimport InboxData from \"./SpamData\";\r\nimport { GetSpamData, toggleTodo, toggleFlag, removeMail } from \"./spamSlice\";\r\nimport { toggleDeleteTodo } from \"../delete/deleteSlice\";\r\n\r\nconst Spam = () => {\r\n  const count = useSelector(GetSpamData);\r\n  const dispatch = useDispatch();\r\n  const { url } = useRouteMatch();\r\n  const [filter, setFilter] = useState();\r\n  // flitering based on project types\r\n  const filteredDatas = !filter\r\n    ? count\r\n    : count.filter((project) => project[filter]);\r\n  // map those fliter items\r\n  const linkList = filteredDatas.map((product) => {\r\n    return (\r\n      <Link\r\n        to={`${url}/${product.id}`}\r\n        className=\"text-decoration-none\"\r\n        key={product.id}\r\n      >\r\n        <span\r\n          className=\"list-group-item list-group-item-action\"\r\n          onClick={() => dispatch(toggleTodo(product.id))}\r\n          style={{\r\n            fontWeight: product.unread ? \"700\" : \"400\",\r\n          }}\r\n        >\r\n          <div className=\"d-flex w-100 justify-content-between\">\r\n            <h5 className=\"mb-1\">{product.subject}</h5>\r\n            <div\r\n              className=\"btn-group\"\r\n              role=\"group\"\r\n              aria-label=\"Basic mixed styles example\"\r\n            >\r\n              <a\r\n                className=\"nav-link p-0 px-1\"\r\n                onClick={() => dispatch(toggleFlag(product.id))}\r\n                style={{\r\n                  color: product.isflag ? \"#f30\" : \"#007bff\",\r\n                }}\r\n              >\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"15\"\r\n                  height=\"15\"\r\n                  viewBox=\"0 0 24 24\"\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  className=\"feather feather-flag\"\r\n                >\r\n                  <path d=\"M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z\"></path>\r\n                  <line x1=\"4\" y1=\"22\" x2=\"4\" y2=\"15\"></line>\r\n                </svg>\r\n              </a>\r\n              <a\r\n                className=\"nav-link p-0 px-1\"\r\n                onClick={() => {\r\n                  dispatch(removeMail(product.id));\r\n                  dispatch(toggleDeleteTodo(product));\r\n                }}\r\n              >\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  width=\"15\"\r\n                  height=\"15\"\r\n                  viewBox=\"0 0 24 24\"\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  className=\"feather feather-trash-2\"\r\n                >\r\n                  <polyline points=\"3 6 5 6 21 6\"></polyline>\r\n                  <path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"></path>\r\n                  <line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"></line>\r\n                  <line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"></line>\r\n                </svg>\r\n              </a>\r\n            </div>\r\n          </div>\r\n          <p className=\"mb-1  text-truncate\">\r\n            {product.isflag}\r\n            <span dangerouslySetInnerHTML={{ __html: product.content }}></span>\r\n          </p>\r\n        </span>\r\n      </Link>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"container-fluid overflow-hidden p-0\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-4 col-lg-4  p-0\">\r\n          <div\r\n            className=\"btn-toolbar border-right\"\r\n            role=\"toolbar\"\r\n            aria-label=\"Toolbar with button groups\"\r\n          >\r\n            {/* filter based on values */}\r\n            <div\r\n              className=\"btn-group me-2 ml-auto m-2\"\r\n              role=\"group\"\r\n              aria-label=\"First group\"\r\n            >\r\n              <button\r\n                type=\"button\"\r\n                className={`btn btn-outline-secondary border-0 outline btn-sm ${\r\n                  filter ? \"none\" : \"active\"\r\n                }`}\r\n                onClick={() => setFilter()}\r\n              >\r\n                All\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className={`btn btn-outline-secondary border-0 outline btn-sm ${\r\n                  filter ? \"active\" : \"none\"\r\n                }`}\r\n                onClick={() => setFilter(\"isflag\")}\r\n              >\r\n                Flagged\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div className=\"list-group sidebar2\">{linkList}</div>\r\n        </div>\r\n        {/* get values from splice method and pass it to the list */}\r\n        {linkList.length ? (\r\n          <div className=\"col-md-8 ms-sm-auto col-lg-8 mt-4\">\r\n            {/* nested routes start */}\r\n            <Route path={`${url}/:productId`}>\r\n              <InboxData data={count} />\r\n            </Route>\r\n            <Route exact path={url}>\r\n              <div className=\"col-md-8 col-lg-8\">\r\n                <div className=\"card border-0\">\r\n                  <div className=\"card-body text-center\">\r\n                    <h4>Please select any message...</h4>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Route>\r\n            {/* nested route ended */}\r\n          </div>\r\n        ) : (\r\n          // null itmes found\r\n          <div className=\"col-md-8 ms-sm-auto col-lg-8 mt-4\">\r\n            <div className=\"card border-0\">\r\n              <div className=\"card-body text-center\">\r\n                <h4>No Items Found</h4>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spam;\r\n","E:\\node\\my-app\\src\\features\\spam\\SpamData.js",[],"E:\\node\\my-app\\src\\features\\spam\\spamSlice.js",[],"E:\\node\\my-app\\src\\features\\delete\\deleteSlice.js",[],"E:\\node\\my-app\\src\\features\\delete\\Delete.js",["64","65"],"import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getDeleteData } from \"./deleteSlice\";\r\n\r\nconst Inbox = () => {\r\n  // get values from the selector\r\n  const count = useSelector(getDeleteData);\r\n\r\n  return (\r\n    <div className=\"container-fluid overflow-hidden p-0\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n          {count.length > 0 ? (\r\n            <div className=\"list-group border-0 border-bottom\">\r\n              {count.map((person, index) => (\r\n                <span\r\n                  className=\"list-group-item list-group-item-action\"\r\n                  aria-current=\"true\"\r\n                  key={index}\r\n                  style={{\r\n                    fontWeight: person.unread ? \"700\" : \"400\",\r\n                  }}\r\n                >\r\n                  <div className=\"d-flex w-100 justify-content-between\">\r\n                    <h5 className=\"mb-1\">{person.subject}</h5>\r\n                  </div>\r\n                  <p\r\n                    className=\"mb-1\"\r\n                    dangerouslySetInnerHTML={{ __html: person.content }}\r\n                  ></p>\r\n                </span>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <div className=\"card border-top-0 border-end-0 \">\r\n              <div className=\"card-body text-center\">\r\n                Sorry No Meessage Found\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Inbox;\r\n","E:\\node\\my-app\\src\\features\\delete\\DeleteData.js",[],"E:\\node\\my-app\\src\\features\\inbox\\Inbox.js",["66","67","68","69","70"],"E:\\node\\my-app\\src\\features\\inbox\\InboxData.js",[],"E:\\node\\my-app\\src\\features\\inbox\\inboxSlice.js",["71"],"import { createSlice, createSelector } from \"@reduxjs/toolkit\";\r\n\r\nimport { toggleDeleteTodo } from \"../delete/deleteSlice\";\r\n\r\nexport const inboxSlice = createSlice({\r\n  name: \"inboxStore\",\r\n  initialState: {\r\n    // intial state for inbox\r\n    inbox: [\r\n      {\r\n        id: 1,\r\n        mId: \"guid-1\",\r\n        unread: true,\r\n        subject: \"Program\",\r\n        content:\r\n          \"About Microsoft Virtual Academy<br/>Microsoft Virtual Academy provides free online training by world-class experts to help you build your technical skills and advance your career. Make it your destination of choice to get started on the latest Microsoft technologies and join this vibrant community.\",\r\n      },\r\n      {\r\n        id: 2,\r\n        mId: \"guid-2\",\r\n        unread: false,\r\n        subject: \"Empower your future\",\r\n        content:\r\n          \"We foster our pipeline of future leaders with 47 employee networks and 7 global employee resource groups, servicing an active community of thousands across Microsoft\",\r\n      },\r\n    ],\r\n  },\r\n  // get the payload value and make actions\r\n  reducers: {\r\n    toggleTodo: (state, action) => {\r\n      const todo = state.inbox.find((todo) => todo.id === action.payload);\r\n      if (todo && todo.unread === true) {\r\n        todo.unread = false;\r\n      }\r\n    },\r\n    toggleFlag: (state, action) => {\r\n      const todo = state.inbox.find((todo) => todo.id === action.payload);\r\n      if (todo) {\r\n        todo.isflag = !todo.isflag;\r\n      }\r\n    },\r\n\r\n    removeMail: (state, action) => {\r\n      return {\r\n        ...state.inbox,\r\n        inbox: state.inbox.filter((todo) => todo.id !== action.payload),\r\n      };\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  toggleTodo,\r\n  toggleFlag,\r\n  removeMail,\r\n  getInboxUnreadCount,\r\n} = inboxSlice.actions;\r\n\r\nexport const deltethunk = (product) => (dispatch, getState) => {\r\n  dispatch(removeMail(product.id));\r\n  dispatch(toggleDeleteTodo(product));\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state.\r\nexport const GetInbox = (state) => state.inboxStore.inbox;\r\n\r\nexport default inboxSlice.reducer;\r\n",{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":25,"column":9,"nodeType":"78","endLine":25,"endColumn":65},{"ruleId":"76","severity":1,"message":"77","line":39,"column":15,"nodeType":"78","endLine":45,"endColumn":16},{"ruleId":"76","severity":1,"message":"77","line":59,"column":15,"nodeType":"78","endLine":65,"endColumn":16},{"ruleId":"79","severity":1,"message":"80","line":1,"column":17,"nodeType":"81","messageId":"82","endLine":1,"endColumn":26},{"ruleId":"79","severity":1,"message":"83","line":2,"column":23,"nodeType":"81","messageId":"82","endLine":2,"endColumn":34},{"ruleId":"79","severity":1,"message":"84","line":9,"column":3,"nodeType":"81","messageId":"82","endLine":9,"endColumn":13},{"ruleId":"79","severity":1,"message":"85","line":12,"column":10,"nodeType":"81","messageId":"82","endLine":12,"endColumn":26},{"ruleId":"76","severity":1,"message":"77","line":31,"column":9,"nodeType":"78","endLine":37,"endColumn":10},{"ruleId":"76","severity":1,"message":"77","line":45,"column":15,"nodeType":"78","endLine":51,"endColumn":16},{"ruleId":"76","severity":1,"message":"77","line":65,"column":15,"nodeType":"78","endLine":68,"endColumn":16},{"ruleId":"79","severity":1,"message":"86","line":1,"column":23,"nodeType":"81","messageId":"82","endLine":1,"endColumn":37},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useDispatch' is defined but never used.","'removeMail' is defined but never used.","'toggleDeleteTodo' is defined but never used.","'createSelector' is defined but never used.","no-global-assign","no-unsafe-negation"]